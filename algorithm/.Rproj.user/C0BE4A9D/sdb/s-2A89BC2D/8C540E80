{
    "collab_server" : "",
    "contents" : "library(XLConnect)\nlibrary(XLConnectJars)\nlibrary(readxl)\n\n###################################\n##Initialize\ndf <- read_excel(\"ParsedData.xlsx\")\n######################################################################################\n##Assigning to Variables\nfindingTimeDifference <- function(x)\n{\n  options(scipen = 999) #remove scientific notation\n  x[\"Time Difference\"] <- NA\n  firstSeen <- x[1:nrow(x),c('First Seen')]\n  lastSeen <- x[1:nrow(x),c('Last Seen')]\n  firstSeenData <- strptime(firstSeen, format = \"%c\",  tz = \"CET\")\n  lastSeenData <- strptime(lastSeen, format = \"%c\",  tz = \"CET\")\n  timeDifference <- difftime(lastSeenData, firstSeenData, units = \"mins\")\n  timeDifference <- round(timeDifference, digits = 3)\n  x[1:nrow(x), \"Time Difference\"] <- timeDifference\n  \n  i = 1\n  while ( i <= nrow(x))\n  {\n    if((x[i,\"Time Difference\"] < 2.000) | (x[i,\"Time Difference\"] > 25.00))\n    {\n      x[i, \"Time Difference\"] <- -1\n    }\n      i <- i + 1\n  }\n  \n  return (x[1:nrow(x),\"Time Difference\"])\n}\ndf[1:nrow(df), \"Time Difference\"] <- findingTimeDifference(df)\n########################################################\n## creating phone list\n#phone <- read_excel(\"phone.xlsx\")\n########################################################\n##categorizing as vehicle or pedestrian\nfindingVP <- function(x)\n{\n  x[\"V or P\"] <- NA\n  i <- 1\n  while (i <= nrow(x))\n  {\n    if((x[i, \"Time Difference\"] >= 2.000)  & x[i,\"Time Difference\"] < 15.000) # greater than 3 min to 25 min, pedestrian\n    {\n      x[i, \"V or P\"] <- \"Vehicle\"\n      i <- i + 1\n    }\n    else if (x[i, \"Time Difference\"] >= 15.000 & x[i, \"Time Difference\"] <= 25.000)\n    {\n      x[i, \"V or P\"] <- \"Pedestrian\"\n      i <- i + 1\n    }\n    else\n    {\n      x[i, \"V or P\"] <- \"Other\"\n      i <- i + 1\n    }\n  }\n  return (x[1:nrow(x), \"V or P\"])\n}\ndf[1:nrow(df), \"V or P\"] <- findingVP(df)\n########################################################\n## functions to find the mean of vehicle and pedestrian\nfindingMeanVehicle <- function(x)\n{\n  temp <- matrix(NA, nrow(x), 1)\n  i <- 1 #pointer to temp table\n  j <- 1 #pointer to x, datafile\n  while( j <= nrow(x) )\n  {\n    if( is.na(x[j, \"V or P\"]) | x[j, \"V or P\"] == \"Pedestrian\")\n    {\n      j <- j + 1  \n    }\n    else\n    {\n      temp[i, 1] <- x[j, \"Time Difference\"]\n      i <- i + 1\n      j <- j + 1\n    }\n  }\n  return (colMeans(temp, na.rm = TRUE))\n} \nmeanVehicle <- findingMeanVehicle(df)\nmeanVehicle <- round(meanVehicle, digits = 3)\n#######\nfindingMeanPedestrian <- function(x)\n{\n  temp <- matrix(NA, nrow(x), 1)\n  i <- 1 #pointer to temp table\n  j <- 1 #pointer to x, datafile\n  while( j <= nrow(x) )\n  {\n    if( is.na(x[j, \"V or P\"]) | x[j, \"V or P\"] == \"Vehicle\")\n    {\n      j <- j + 1  \n    }\n    else\n    {\n      temp[i, 1] <- x[j, \"Time Difference\"]\n      i <- i + 1\n      j <- j + 1\n    }\n  }\n  return (colMeans(temp, na.rm = TRUE))\n}\nmeanPedestrian <- findingMeanPedestrian(df)\nmeanPedestrian <- round(meanPedestrian, digits = 3)\n###########################################################################\n#library(Hmisc)\n#library(car)\n#library(plyr)\n##Category Identifying \nfindingCategory <- function(x, y, z)\n{\n  x[\"Category\"] <- NA\n  updatedY = y + 2 # for fair\n  updatedZ = z + 2\n  updatedYY = y + 4 # for congestion\n  updatedZZ = z + 4\n  \n  i <- 1\n  while (i <= nrow(x))\n  {\n    if((x[i, \"V or P\"]) == \"Other\")\n    {\n      x[i, \"Category\"] <- \"Other\"\n      i <- i + 1\n    }\n    else if (x[i, \"V or P\"] == \"Vehicle\")\n    {\n      if( (x[i,\"Time Difference\"] <= updatedY) && (x[i,\"Time Difference\"] > 0) ) #when cars are <= average\n      {\n        x[i,\"Category\"] <- \"Good\"\n        i <- i + 1\n      }\n      else if ( (x[i, \"Time Difference\"] >= updatedYY) )                 #when cars are >= average + 2secs\n      {\n        x[i, \"Category\"] <- \"Congested\"\n        i <- i + 1\n      }\n      else                                                            #when cars are between avg and avg+2\n      {\n        x[i, \"Category\"] <- \"Fair\"\n        i <- i + 1\n      }\n    }\n    else\n    {\n      if( (x[i,\"Time Difference\"] <= updatedZ) && (x[i,\"Time Difference\"] > 0) ) #when pedestrians are less than average\n      {\n        x[i,\"Category\"] <- \"Good\"\n        i <- i + 1\n      }\n      else if ( (x[i, \"Time Difference\"] >= updatedZZ))                   #when pedestrians are greater than average\n      {\n        x[i, \"Category\"] <- \"Congested\"\n        i <- i + 1\n      }\n      else\n      {\n        x[i, \"Category\"] <- \"Fair\"\n        i <- i + 1\n      }\n    }\n  }\n  return (x[1:nrow(x),\"Category\"])\n}\ndf[1:nrow(df), \"Category\"] <- findingCategory(df, meanVehicle, meanPedestrian)\n#############################################################################################\n## KNN\ntable(df$Category)\nhead(df)\nset.seed(9850)\ngp <- runif(nrow(df))\ndf2 <- df[order(gp), ]\nhead(df2)\n\nsummary(df2[,c(5)])\ndf_n <- as.data.frame(df2[,c(5)])\nstr(df_n)\nsummary(df_n)\n\ndf_train <- df_n[1:300, ,drop = FALSE]\ndf_test <- df_n[301:360, , drop = FALSE]\ndf_train_target <- df2[1:300, 7]\ndf_test_target <- df2[301:360, 7]\nrequire(class)\nsqrt(360)\nm1 <- knn(train = df_train, test = df_test, cl = df_train_target, k = 19)\ntable(df_test_target, m1)\n\n\n\n",
    "created" : 1465492024757.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1422584751",
    "id" : "8C540E80",
    "lastKnownWriteTime" : 1466109604,
    "last_content_update" : 1466109604196,
    "path" : "~/GitHub/machineLearningAlgorithm/algorithm/KNN.R",
    "project_path" : "KNN.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}