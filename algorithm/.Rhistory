{
temp <- matrix(NA, nrow(x), 1)
i <- 1 #pointer to temp table vehicle
j <- 1 #pointer to x, datafile
while( j <= nrow(x) )
{
if (is.na(x[i, "V or P"]) | x[i, "V or P"] == "Pedestrian")
{
j <- j + 1
}
else
{
temp[i, 1] <- x[j, "Time Difference"]
i <- i + 1
j <- j + 1
print(temp)
}
}
return (colMeans(temp, na.rm = TRUE))
}
meanVehicle <- findingMeanVehicle(df)
findingTimeDifference <- function(x)
{
options(scipen = 999) #remove scientific notation
x["Time Difference"] <- NA
firstSeen <- x[1:nrow(x),c('First Seen')]
lastSeen <- x[1:nrow(x),c('Last Seen')]
firstSeenData <- strptime(firstSeen, format = "%c",  tz = "CET")
lastSeenData <- strptime(lastSeen, format = "%c",  tz = "CET")
timeDifference <- difftime(lastSeenData, firstSeenData, units = "mins")
timeDifference <- round(timeDifference, digits = 3)
x[1:nrow(x), "Time Difference"] <- timeDifference
i = 1
while ( i <= nrow(x))
{
if((x[i,"Time Difference"] < 2.000) | (x[i,"Time Difference"] > 25.00))
{
x[i, "Time Difference"] <- NA
}
i <- i + 1
}
return (x[1:nrow(x),"Time Difference"])
}
df[1:nrow(df), "Time Difference"] <- findingTimeDifference(df)
findingVP <- function(x)
{
x["V or P"] <- NA
i <- 1
while (i < nrow(x))
{
if((x[i, "Time Difference"] >= 2.000)  & x[i,"Time Difference"] < 15.000) # greater than 3 min to 25 min, pedestrian
{
x[i, "V or P"] <- "Vehicle"
i <- i + 1
}
else if (x[i, "Time Difference"] >= 15.000 & x[i, "Time Difference"] <= 25.000)
{
x[i, "V or P"] <- "Pedestrian"
i <- i + 1
}
else
{
x[i, "V or P"] <- NA
i <- i + 1
}
}
return (x[1:nrow(x), "V or P"])
}
df[1:nrow(df), "V or P"] <- findingVP(df)
####################################################
temp <- matrix(NA, nrow(df), 1)
i <- 1 #pointer to temp table vehicle
j <- 1 #pointer to x, datafile
while( j <= nrow(df) )
{
if (is.na(df[i, "V or P"]) | df[i, "V or P"] == "Pedestrian")
{
j <- j + 1
}
else
{
temp[i, 1] <- df[j, "Time Difference"]
i <- i + 1
j <- j + 1
}
}
(colMeans(temp, na.rm = TRUE))
findingMeanVehicle <- function(x)
{
temp <- matrix(NA, nrow(x), 1)
i <- 1 #pointer to temp table vehicle
j <- 1 #pointer to x, datafile
while( j <= nrow(x) )
{
if (is.na(x[i, "V or P"]) )
{
j <- j + 1
}
else if (x[i, "V or P"] == "Pedestrian")
{
j <- j + 1
}
else
{
temp[i, 1] <- x[j, "Time Difference"]
i <- i + 1
j <- j + 1
}
}
return (colMeans(temp, na.rm = TRUE))
}
meanVehicle <- findingMeanVehicle(df)
temp <- matrix(NA, nrow(df), 1)
i <- 1 #pointer to temp table vehicle
j <- 1 #pointer to x, datafile
while( j <= 10 )
{
if (is.na(df[i, "V or P"]) | df[i, "V or P"] == "Pedestrian")
{
j <- j + 1
}
else
{
temp[i, 1] <- df[j, "Time Difference"]
i <- i + 1
j <- j + 1
}
}
(colMeans(temp, na.rm = TRUE))
rm(i,j,temp)
findingMeanPedestrian <- function(x)
{
temp <- matrix(NA, 292, 1)
i <- 1 #pointer to temp table
j <- 1 #pointer to x, datafile
while( j <= 292 )
{
if( x[j, "Company"] != "Unknown" ) ## calculating mean for vehicle
{
if( x[j, "Time Difference"] != 0 )
{
temp[i, 1] <- x[j, "Time Difference"]
i <- i + 1
j <- j + 1
}
else
{
j <- j + 1
}
}
else
{
j <- j + 1
}
}
return (colMeans(temp, na.rm = TRUE))
}
meanPedestrian <- findingMeanPedestrian(df)
################################################
findingMeanPedestrian <- function(x)
{
temp <- matrix(NA, nrow(x), 1)
i <- 1 #pointer to temp table
j <- 1 #pointer to x, datafile
while( j <= nrow(x) )
{
if( x[j, "V or P"] != "Vehicle" ) ## calculating mean for vehicle
{
temp[i, 1] <- x[j, "Time Difference"]
i <- i + 1
j <- j + 1
}
else
{
j <- j + 1
}
}
return (colMeans(temp, na.rm = TRUE))
}
meanPedestrian <- findingMeanPedestrian(df)
findingMeanPedestrian <- function(x)
{
temp <- matrix(NA, nrow(x), 1)
i <- 1 #pointer to temp table
j <- 1 #pointer to x, datafile
while( j <= nrow(x) )
{
if( is.na(x[j, "V or P"]) | x[j, "V or P"] == "Pedestrian" ) ## calculating mean for vehicle
{
temp[i, 1] <- x[j, "Time Difference"]
i <- i + 1
j <- j + 1
}
else
{
j <- j + 1
}
}
return (colMeans(temp, na.rm = TRUE))
}
meanPedestrian <- findingMeanPedestrian(df)
findingMeanPedestrian <- function(x)
{
temp <- matrix(NA, nrow(x), 1)
i <- 1 #pointer to temp table
j <- 1 #pointer to x, datafile
while( j <= nrow(x) )
{
if( is.na(x[j, "V or P"]) | x[j, "V or P"] == "Vehicle")
{
j <- j + 1
}
else
{
temp[i, 1] <- x[j, "Time Difference"]
i <- i + 1
j <- j + 1
}
}
return (colMeans(temp, na.rm = TRUE))
}
meanPedestrian <- findingMeanPedestrian(df)
findingMeanVehicle <- function(x)
{
temp <- matrix(NA, nrow(x), 1)
i <- 1 #pointer to temp table
j <- 1 #pointer to x, datafile
while( j <= nrow(x) )
{
if( is.na(x[j, "V or P"]) | x[j, "V or P"] == "Pedestrian")
{
j <- j + 1
}
else
{
temp[i, 1] <- x[j, "Time Difference"]
i <- i + 1
j <- j + 1
}
}
return (colMeans(temp, na.rm = TRUE))
}
meanVehicle <- findingMeanVehicle(df)
meanPedestrian <- round(meanPedestrian, digits = 3)
meanVehicle <- round(meanVehicle, digits = 3)
findingCategory <- function(x, y, z)
{
x["Category"] <- NA
updatedY = y + 2 # for fair
updatedZ = z + 2
updatedYY = y + 4 # for congestion
updatedZZ = z + 4
i <- 1
while (i < nrow(x))
{
if(is.na(x[i, "V or P"]))
{
i <- i + 1
}
else if (x[i, "V or P"] == "Vehicle")
{
if( (x[i,"Time Difference"] <= updatedY) && (x[i,"Time Difference"] > 0) ) #when cars are <= average
{
x[i,"Category"] <- "Good"
}
else if ( (x[i, "Time Difference"] >= updatedYY) )                 #when cars are >= average + 2secs
{
x[i, "Category"] <- "Congested"
}
else                                                            #when cars are between avg and avg+2
{
x[i, "Category"] <- "Fair"
}
}
else
{
if( (x[i,"Time Difference"] <= updatedZ) && (x[i,"Time Difference"] > 0) ) #when pedestrians are less than average
{
x[i,"Category"] <- "Good"
}
else if ( (x[i, "Time Difference"] >= updatedZZ))                   #when pedestrians are greater than average
{
x[i, "Category"] <- "Congested"
}
else
{
x[i, "Category"] <- "Fair"
}
}
}
return (x[1:nrow(x),"Category"])
}
df[1:nrow(df), "Category"] <- category(df, meanVehicle, meanPedestrian)
df["Category"] <- NA
findingCategory <- function(x, y, z)
{
updatedY = y + 2 # for fair
updatedZ = z + 2
updatedYY = y + 4 # for congestion
updatedZZ = z + 4
i <- 1
while (i < nrow(x))
{
if(is.na(x[i, "V or P"]))
{
i <- i + 1
}
else if (x[i, "V or P"] == "Vehicle")
{
if( (x[i,"Time Difference"] <= updatedY) && (x[i,"Time Difference"] > 0) ) #when cars are <= average
{
x[i,"Category"] <- "Good"
}
else if ( (x[i, "Time Difference"] >= updatedYY) )                 #when cars are >= average + 2secs
{
x[i, "Category"] <- "Congested"
}
else                                                            #when cars are between avg and avg+2
{
x[i, "Category"] <- "Fair"
}
}
else
{
if( (x[i,"Time Difference"] <= updatedZ) && (x[i,"Time Difference"] > 0) ) #when pedestrians are less than average
{
x[i,"Category"] <- "Good"
}
else if ( (x[i, "Time Difference"] >= updatedZZ))                   #when pedestrians are greater than average
{
x[i, "Category"] <- "Congested"
}
else
{
x[i, "Category"] <- "Fair"
}
}
}
return (x[1:nrow(x),"Category"])
}
df[1:nrow(df), "Category"] <- category(df, meanVehicle, meanPedestrian)
#############################################################################
findingCategory <- function(x, y, z)
{
x["Category"] <- NA
updatedY = y + 2 # for fair
updatedZ = z + 2
updatedYY = y + 4 # for congestion
updatedZZ = z + 4
i <- 1
while (i < nrow(x))
{
if(is.na(x[i, "V or P"]))
{
i <- i + 1
}
else if (x[i, "V or P"] == "Vehicle")
{
if( (x[i,"Time Difference"] <= updatedY) && (x[i,"Time Difference"] > 0) ) #when cars are <= average
{
x[i,"Category"] <- "Good"
}
else if ( (x[i, "Time Difference"] >= updatedYY) )                 #when cars are >= average + 2secs
{
x[i, "Category"] <- "Congested"
}
else                                                            #when cars are between avg and avg+2
{
x[i, "Category"] <- "Fair"
}
}
else
{
if( (x[i,"Time Difference"] <= updatedZ) && (x[i,"Time Difference"] > 0) ) #when pedestrians are less than average
{
x[i,"Category"] <- "Good"
}
else if ( (x[i, "Time Difference"] >= updatedZZ))                   #when pedestrians are greater than average
{
x[i, "Category"] <- "Congested"
}
else
{
x[i, "Category"] <- "Fair"
}
}
}
return (x[1:nrow(x),"Category"])
}
df[1:nrow(df), "Category"] <- findingCategory(df, meanVehicle, meanPedestrian)
findingCategory <- function(x, y, z)
{
x["Category"] <- NA
updatedY = y + 2 # for fair
updatedZ = z + 2
updatedYY = y + 4 # for congestion
updatedZZ = z + 4
i <- 1
while (i < nrow(x))
{
if(is.na(x[i, "V or P"]))
{
i <- i + 1
}
else if (x[i, "V or P"] == "Vehicle")
{
if( (x[i,"Time Difference"] <= updatedY) && (x[i,"Time Difference"] > 0) ) #when cars are <= average
{
x[i,"Category"] <- "Good"
i <- i + 1
}
else if ( (x[i, "Time Difference"] >= updatedYY) )                 #when cars are >= average + 2secs
{
x[i, "Category"] <- "Congested"
i <- i + 1
}
else                                                            #when cars are between avg and avg+2
{
x[i, "Category"] <- "Fair"
i <- i + 1
}
}
else
{
if( (x[i,"Time Difference"] <= updatedZ) && (x[i,"Time Difference"] > 0) ) #when pedestrians are less than average
{
x[i,"Category"] <- "Good"
i <- i + 1
}
else if ( (x[i, "Time Difference"] >= updatedZZ))                   #when pedestrians are greater than average
{
x[i, "Category"] <- "Congested"
i <- i + 1
}
else
{
x[i, "Category"] <- "Fair"
i <- i + 1
}
}
}
return (x[1:nrow(x),"Category"])
}
df[1:nrow(df), "Category"] <- findingCategory(df, meanVehicle, meanPedestrian)
plot(df$`First Seen`, df$Category)
plot(df$`First Seen`, df$Category != NA)
plot(df$`First Seen`, !is.na(df$Category))
firstSeen <- x[1:nrow(x),c('First Seen')]
lastSeen <- x[1:nrow(x),c('Last Seen')]
firstSeenData <- strptime(firstSeen, format = "%c",  tz = "CET")
lastSeenData <- strptime(lastSeen, format = "%c",  tz = "CET")
firstSeen <- df[1:nrow(df),c('First Seen')]
lastSeen <- df[1:nrow(df),c('Last Seen')]
firstSeenData <- strptime(firstSeen, format = "%c",  tz = "CET")
lastSeenData <- strptime(lastSeen, format = "%c",  tz = "CET")
plot(firstSeenData, !is.na(df$Category))
plot(firstSeenData, df$Category)
plot(firstSeenData, !is.na(df$Category))
plot(firstSeenData, lastSeenData)
plot(firstSeenData, factor(!is.na(df$Category)))
a(iris)
str
data(iris)
str(iris)
table(iris$Species)
head(iris)
set.seed(9850)
runif(5)
runif(nrow(iris))
gp <-runif(nrow(iris))
iris2 <- iris[order(gp), ]
head(iris2)
summary(iris[,c(1,2,3,4)])
normalize <- function(x){return( (x-- min(x)) / (max(x) - min(x)) )}
normalize(c(1,2,3,4,5))
normalize <- function(x){return( (x- min(x)) / (max(x) - min(x)) )}
normalize(c(1,2,3,4,5))
normalize(c(10,20,30,40,50))
iris_n <- as.data.frame(lapply(iris[,c(1,2,3,4)], normalize))
str(iris_n)
summary(iris_n)
a(iris)
str(iris)
table(iris$Species)
head(iris)
set.seed(9850)
runif(5)
gp <-runif(nrow(iris))
iris <- iris[order(gp), ]
head(iris)
summary(iris[,c(1,2,3,4)])
normalize <- function(x){return( (x- min(x)) / (max(x) - min(x)) )}
normalize(c(1,2,3,4,5))
normalize(c(10,20,30,40,50))
iris_n <- as.data.frame(lapply(iris[,c(1,2,3,4)], normalize))
str(iris_n)
summary(iris_n)
iris_train <- iris_n[1:129, ]
iris_test <- iris_n[1:129, ]
iris_train <- iris_n[1:139, ]
iris_train <- iris_n[1:129, ]
iris_test <- iris_n[130:150, ]
iris_train_target <- iris[1:129, 5]
iris_test_target <- iris[130:150, 5]
require(class)
k = 13 #sqrt(150)
m1  <- knn(train = iris_train, test = iris_test, cl = iris_train_target, k = 13)
m1
table(iris_test_target, m1)
data(iris)
str(iris)
table(iris$Species)
